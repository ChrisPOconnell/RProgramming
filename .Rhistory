library("swirl")
install.library("swirl")
install.packages("swirl")
library("swirl")
swirl()
q
install_from_swirl("R Programming")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- (z -1)^2
my_sqrt <- sqrt(z -1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z * 2 + 1000
my_div
get(wd)
getwd()
ls()
x <- 9
ls()
list.files()
dir()
?list.files
args(dir)
args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
list.files()
file.path("mytest3.R")
file.path("folder1")
file.path("folder1", "folder2")
play()
list.files()
dir()
nxt()
?dir.create
play()
dir.create(filepath("testdir2","testdir3"),,recursive = TRUE,)
dir.create(file.path("testdir2","testdir3"),,recursive = TRUE,)
dir()
dir("testdir2")
nxt()
dir.create(file.path("testdir2","testdir3"),,recursive = TRUE,)
play()
?unlink
nxt()
unlink("testdir2")
unlink("testdir2", recursive = TRUE)
play()
old.dir
nxt()
play(old.dir)
setwd(old.dir)
unlink("testdir")
play()
dir("testdir")
nxt()
unlink("testdir",recursive = TRUE)
1:20
pi:10
15:1
`:`
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10, length.out = 30)
seq(5,10, length = 30)
my_seq <- seq(5,10, length.out = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
play()
?along.with
?seq_along
next()
nxt()
seq_along(my_seq)
play()
my_seq
play()
next()
nxt()
rep(0, times=40)
rep(c(0,1,2),times = 10)
rep(c(0,1,2), each = 10)
swirl()
play("ls()")
q
quit
quit
exit
q
q()
install.packages("swirl")
library("swirl")
install_from_swirl("R Programming")
swirl()
cun_vect  <- c(0.5, 55, -10, 6)
num_vect  <- c(0.5, 55, -10, 6)
tf  <- num_vect < 1
tf
num_vect >= 6
my_name  <- c("my","name","is")
my_char  <- c("my","name","is")
my_char  <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name  <- c(mycar,"Chris")
my_name  <- c(my_char,"Chris")
my_name
paste(my_name, collapse = " ")
play()
name <- paste(my_name, collapse = " ")
name
my_name
=nxt()
nxt()
paste("Hello", "world!", sep = " ")
v <- 1:3
paste(1:3, c("x","y","z"), sep = "")
paste(1:3, c("X","Y","Z"), sep = "")
play()
letters
nxt()
paste(LETTERS,1:4,sep = "-")
x  <- c(44,NA,5,NA)
x * 3
y  <-  rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
play()
?sample
nxt()
?
;
is.na(my_data)
my_na <- is.na(my_data)
my_na
play()
MY_DATA
my_data
?rnorm
nxt()
my_data == NA
sum(my_na)
my_data
0/0
inf-inf
Inf-Inf
x
play()
x[1:5]
nxt()
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y >0]
x[x>0]
x[!is.na(x) & x>0]
=play()
play()
x
x[3,5,7]
x[c(3,5,7)]
nxt()
x[(c(3,5,7))]
x[(c(3,5,7))]
vec <- c(3,5,7)
info()
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
vect[c("foo,"bar","norf"")]
vect[c("foo","bar","norf"")]
]
)
]
;
""
vect[c("foo","bar","norf")]
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
x  <-  1:9
x
seq_along(x)
y  <-  seq_along(x)
y
class(x,y)
class(x)
class(y)
y <- 20
seq_along(y)
seq_len(y)
?seq_len
y <- seq_along(20:40)
y
a <- seq_along(20:40)
a  <- 20:40
seq_along(a)
seq_len(a)
seq_len(a)
a <- 20:40
seq_len(a)
a <- 1:20
seq_len(a)
cube <- function(x,n) {
x^3
}
cube(3)
x <- 1:10
if(x >5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <-  10
f(3)
f <- function(x) {
g <- function(y) {
y + z               #Neither of these values are passed
}
z <- 4                #this is passed AFTER the function that uses Z in a calculation
x + g(x)              #x is passed, G is not.
X
}
f(10)
f(3)
z <- 10
f(3)
f <- function(x) {
g <- function(y) {
y + z               #Neither of these values are passed
}
z <- 4                #this is passed AFTER the function that uses Z in a calculation
x + g(x)              #x is passed, G is not.
x
}
f(3)
clear
b
x
z
z <- na
z <- 'na'
z
f(3)
z <- 10
f(3)
f <- function(x) {
g <- function(y) {
y + z               #Neither of these values are passed
}
z <- 4                #this is passed AFTER the function that uses Z in a calculation
x + g(x)              #x is passed, G is not.
x                     #the only thing this could possible spit out is the value passed to x
}
z <- 10
f(3)
remove('f','x','g','y','z')
f <- function(x) {
g <- function(y) {
y + z               #Neither of these values are passed
}
z <- 4                #this is passed AFTER the function that uses Z in a calculation
x + g(x)              #x is passed, G is not.
x                     #the only thing this could possible spit out is the value passed to x
}
remove('f','x','y','z')
f <- function(x) {
g <- function(y) {
y + z               #Neither of these values are passed
}
z <- 4                #this is passed AFTER the function that uses Z in a calculation
x + g(x)              #x is passed, G is not.
x                     #the only thing this could possible spit out is the value passed to x
}
x
y
z
f
g
f(3)
z <- 10
f(3)
f <- function(x) {
g <- function(y) {
y + z               #Neither of these values are passed
}
z <- 4                #this is passed AFTER the function that uses Z in a calculation
x + g(x)              #x is passed, G is not.
#the only thing this could possible spit out is the value passed to x
}
f(3)
z <- 10
f(3)
g
f <- function(x) {
#   g <- function(y) {
#      y + z               #Neither of these values are passed
#    }
z <- 4                #this is passed AFTER the function that uses Z in a calculation
x + g(x)              #x is passed, G is not.
#the only thing this could possible spit out is the value passed to x
}
f(3)
f <- function(x) {
g <- function(y) {
#      y + z               #Neither of these values are passed
}
z <- 4                #this is passed AFTER the function that uses Z in a calculation
x + g(x)              #x is passed, G is not.
#the only thing this could possible spit out is the value passed to x
}
f(3)
f <- function(x) {
g <- function(y) {    #This block can't be removed.  Not sure what
#y + z               #Neither of these values are passed
0 + 0
}
z <- 4                #this is passed AFTER the function that uses Z in a calculation
x + g(x)              #x is passed, G is not.
#the only thing this could possible spit out is the value passed to x
}
f(3)
f <- function(x) {
g <- function(y) {    #This block can't be removed.  Not sure what
#y + z               These values are both 0... nothing has been defined here.
0 + 0               #as a result you could sub y + x with 0 + 0, or 0 * 1, or whatever.
}
z <- 4                #this is passed AFTER the function that uses Z in a calculation.  Has 0 impact on program.
x + g(x)              #x is passed, G is not.
#the only thing this could possible spit out is the value passed to x
}
f(3)
f <- function(x) {
g <- function(y) {    #This block can't be removed.  Not sure what
y + z #              These values are both 0... nothing has been defined here.
#0 + 0               #as a result you could sub y + x with 0 + 0, or 0 * 1, or whatever.
}
z <- 4                #this is passed AFTER the function that uses Z in a calculation.  Has 0 impact on program.
x + g(x)              #x is passed, G is not.
#the only thing this could possible spit out is the value passed to x
}
f(3)
source('~/.active-rstudio-document', echo=TRUE)
f <- function(x) {
g <- function(y) {    #This block can't be removed.  Not sure what
y + z #              These values are both 0... nothing has been defined here.
#0 + 0               #as a result you could sub y + x with 0 + 0, or 0 * 1, or whatever.
}
#  z <- 4                #this is passed AFTER the function that uses Z in a calculation.  Has 0 impact on program.
x + g(x)              #x is passed, G is not.
#the only thing this could possible spit out is the value passed to x
}
f(3)
x <- 5
y <- if(x < 3) {
na
} else {
10
}
x <- 5
y <- if(x < 3) {
na
} else {
10
}
x <- 5
y <- if(x < 3) {
na
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
Y
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
Y
y
f <- function(x) {
g <- function(y) {    #This block can't be removed.  Not sure what
y + z #              These values are both 0... nothing has been defined here.
#0 + 0               trying to do this doesn't create the desired results
}
z <- 4                #this is passed AFTER the function that uses Z in a calculation.
x + g(x)              #x is passed, G is passed but should be
#the only thing this could possible spit out is the value passed to x
}
f(3)
?sd
?length
?rnorm
args(lm)
args(f)
ls(environment(g))
f <- function(x) {
g <- function(y) {    #This block can't be removed.  Not sure what
y + z #              These values are both 0... nothing has been defined here.
#0 + 0               trying to do this doesn't create the desired results
}
z <- 4                #this is passed AFTER the function that uses Z in a calculation.
x + g(x)              #x is passed, G is passed but should be
#the only thing this could possible spit out is the value passed to x
}
ls(environment(f))
ls(environment(g))
ls(environment("z","g"))
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
swirl()
swirl(")")
library("swirl")
swirl()
swirl()
swirl
swirl()
swirl()
library("Swirl")
library("swirl")
swirl()
quit
q
?
;
adsf
?
;
hi
swirl()
q
q()
swirl()
library("swirl")
swirl()
